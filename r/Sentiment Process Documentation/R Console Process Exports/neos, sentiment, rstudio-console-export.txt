
[ NEOS ] - rStudio Console Export
------------------------------------------------ 
File: rStudio, Sentiment Analysis, neos.R
------------------------------------------------

> # Set the working directory
> setwd("/Users/stefan/R/Projekte/EUWAHL-R/BA2R-P1")
> library(stringr)    # Textmanipulation
> library(tidytext)   # Textmining
> library(pdftools)
> library(knitr)      # HTML tables
> library(htmlTable)  # HTML tables
> library(lsa)        # stopwords
> library(SnowballC)  # Textmanipulation (truncate)
> library(wordcloud)
> library(gridExtra)  # Plots
> library(dplyr)      
> library(ggplot2)    # Visualization
> library(tidyverse)
> party_raw <- readLines('data/euwahl19-parteiprogramme/txt/clean_text-neos.body.txt')
> party_raw_length <- length(party_raw)
> party_raw_length
[1] 501
> # Convert into tidy text dataframe
> party_df <- data_frame(Zeile = 1:party_raw_length, 
+                        party_raw = party_raw)
> # Convert into "one-token-per-row" format (tidytext)
> party_df %>% 
+   unnest_tokens(token, party_raw) %>% 
+   filter(str_detect(token, "[a-z]")) -> party_df
> stupid_word_count <- dplyr::count(party_df) 
> # Read negative wordlist
> neg_df <- suppressWarnings(read_tsv("data/SentiWS_v1.8c/SentiWS_v1.8c_Negative.txt", col_names = FALSE))
Parsed with column specification:
cols(
  X1 = col_character(),
  X2 = col_double(),
  X3 = col_character()
)
> suppressWarnings(names(neg_df) <- c("Wort_POS", "Wert", "Inflektionen"))
> neg_df %>% 
+   mutate(Wort = str_sub(Wort_POS, 1, regexpr("\\|", .$Wort_POS)-1),
+          POS = str_sub(Wort_POS, start = regexpr("\\|", .$Wort_POS)+1)) -> neg_df
> # Read positive wordlist
> pos_df <- suppressWarnings(read_tsv("data/SentiWS_v1.8c/SentiWS_v1.8c_Positive.txt", col_names = FALSE))
Parsed with column specification:
cols(
  X1 = col_character(),
  X2 = col_double(),
  X3 = col_character()
)
> names(pos_df) <- c("Wort_POS", "Wert", "Inflektionen")
> pos_df %>% 
+   mutate(Wort = str_sub(Wort_POS, 1, regexpr("\\|", .$Wort_POS)-1),
+          POS = str_sub(Wort_POS, start = regexpr("\\|", .$Wort_POS)+1)) -> pos_df
> bind_rows("neg" = neg_df, "pos" = pos_df, .id = "neg_pos") -> sentiment_df
> sentiment_df %>% select(neg_pos, Wort, Wert, Inflektionen, -Wort_POS) -> sentiment_df
> sentiment_neg <- match(party_df$token, filter(sentiment_df, neg_pos == "neg")$Wort)
> neg_score <- sum(!is.na(sentiment_neg))
> sentiment_pos <- match(party_df$token, filter(sentiment_df, neg_pos == "pos")$Wort)
> pos_score <- sum(!is.na(sentiment_pos))
> round(pos_score/neg_score, 1)
[1] 3.3
> party_df %>% 
+   mutate(sentiment_neg = sentiment_neg,
+          sentiment_pos = sentiment_pos) -> party_df
> party_df %>% 
+   filter(!is.na(sentiment_neg)) %>% 
+   dplyr::select(token) -> negative_sentiments
> head(negative_sentiments$token,50)
 [1] "schwerfällig"    "wankelmütig"     "abhängig"        "schwach"         "begrenzen"      
 [6] "kurz"            "besorgt"         "enttäuscht"      "schlecht"        "unterentwickelt"
[11] "unterentwickelt" "eingeschränkt"   "verzichten"      "schwer"          "aussetzen"      
[16] "kürzen"          "begrenzt"        "unwillig"        "sorgen"          "vermeiden"      
[21] "leider"          "schlagen"        "besteuern"       "leider"          "abhängig"       
[26] "verspätet"       "unzureichend"    "teuer"           "sorgen"          "schleppend"     
[31] "leider"          "schulden"        "problematisch"   "begrenzt"        "schulden"       
[36] "beschränkt"      "schulden"        "schulden"        "fallen"          "knapp"          
[41] "kritisch"        "rücksichtslos"   "sinken"          "sorgen"          "anfällig"       
[46] "schwierig"       "fehlen"          "kostspielig"     "schlagen"        "sorgen"         
> party_df %>% 
+   filter(!is.na(sentiment_pos)) %>% 
+   select(token) -> positive_sentiments
> head(positive_sentiments$token, 50)
 [1] "neu"           "grundsätzlich" "verteidigen"   "aufmerksam"    "entschlossen"  "vorantreiben" 
 [7] "aktiv"         "positiv"       "neu"           "gerecht"       "überwältigt"   "verdienen"    
[13] "gewachsen"     "stark"         "neu"           "ermöglichen"   "schaffen"      "weitgehend"   
[19] "stark"         "besten"        "rein"          "schaffen"      "verstärken"    "schnell"      
[25] "vermehrt"      "gemeinsam"     "aktiv"         "gemeinsam"     "effizient"     "transparent"  
[31] "verstehen"     "respektieren"  "verteidigen"   "gemeinsam"     "bestehen"      "besten"       
[37] "überwinden"    "repräsentativ" "gemeinsam"     "vorbereiten"   "steigen"       "führen"       
[43] "unterstützen"  "sicher"        "historisch"    "praktikabel"   "aktuell"       "bereit"       
[49] "erfüllen"      "unberührt"    
> # Pos/Neg word count
> party_df %>% 
+   filter(!is.na(sentiment_neg)) %>% 
+   summarise(n_distinct_neg = n_distinct(token))
# A tibble: 1 x 1
  n_distinct_neg
           <int>
1             65
> party_df %>% 
+   filter(!is.na(sentiment_pos)) %>% 
+   summarise(n_distinct_pos = n_distinct(token))
# A tibble: 1 x 1
  n_distinct_pos
           <int>
1            131
> sentiment_df %>% 
+   rename(token = Wort) -> sentiment_df
> party_df %>% 
+   left_join(sentiment_df, by = "token") -> party_df 
> party_df %>% 
+   filter(!is.na(Wert)) %>% 
+   summarise(Sentimentwert = sum(Wert, na.rm = TRUE)) -> party_sentiment_summe
> party_sentiment_summe$Sentimentwert
[1] -1.7632
> party_df %>% 
+   group_by(neg_pos) %>% 
+   filter(!is.na(Wert)) %>% 
+   summarise(Sentimentwert = sum(Wert)) %>% 
+   htmlTable()
> party_df %>% 
+   filter(neg_pos == "pos") %>% 
+   distinct(token, .keep_all = TRUE) %>% 
+   arrange(-Wert) %>% 
+   filter(row_number() < 11) %>% 
+   dplyr::select(token, Wert) %>% 
+   htmlTable()
> party_df %>% 
+   filter(neg_pos == "neg") %>% 
+   distinct(token, .keep_all = TRUE) %>% 
+   arrange(Wert) %>% 
+   filter(row_number() < 11) %>% 
+   dplyr::select(token, Wert) %>% 
+   htmlTable()
> sentiment_df %>% 
+   filter(!is.na(Wert)) %>% 
+   ggplot() +
+   aes(x = Wert) +
+   geom_histogram()
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
> sentiment_df %>% 
+   filter(!is.na(Wert)) %>% 
+   dplyr::count(neg_pos)
# A tibble: 2 x 2
  neg_pos     n
  <chr>   <int>
1 neg      1818
2 pos      1650
> sentiment_df %>% 
+   filter(!is.na(Wert)) %>% 
+   summarise(sentiment_summe = sum(Wert)) -> sentiment_lexikon_sum
> sentiment_lexikon_sum$sentiment_summe
[1] -186.9448
> sentiment_lexikon_sum$sentiment_summe / party_sentiment_summe$Sentimentwert
[1] 106.0259
